package templates

import (
	"goth/internal/store"
	"strconv"
)

templ Gallery(mediaItems []store.MediaItemWithChannel, currentPage, totalPages int) {
	<div class="media-gallery">
		for _, item := range mediaItems {
			@GalleryItem(&item)
		}
	</div>
	@Pagination(currentPage, totalPages)
}

func favoriteClass(item *store.MediaItemWithChannel) string {
	if item.Favorite {
		return "media-item relative favorite"
	} else {
		return "media-item relative"
	}
}

templ GalleryItem(item *store.MediaItemWithChannel) {
	<div
		class={ favoriteClass(item) }
		id={ "media-item-" + strconv.FormatUint(uint64(item.ID), 10) }
	>
		<div class="media-item-content cursor-pointer" data-fullscreen="true">
			/* Todo: handle mp3, pdf */
			if item.Type == "photo" || item.Type == "image" || item.Type == "png" || item.Type == "gif" || item.Type == "jpeg" || item.Type == "webp" {
				<img src={ "/media/" + item.FileName } alt={ item.FileName }/>
			} else if item.Type == "video" || item.Type == "gif" || item.Type == "webm" || item.Type == "document" {
				<video controls loop >
					<source src={ "/media/" + item.FileName } type="video/mp4"/>
					Your browser does not support the video tag.
				</video>
			}
		</div>
		<div class="media-info">
			<h2 class="media-meta media-filename">
				{ item.FileName } ({ item.Type })
				if item.Favorite {
					<span class="favorite-star">&#9733;</span>
				}
			</h2>
			<p class="media-meta media-channel">Channel: { item.ChannelTitle }</p>
			<p class="media-meta media-date">Date: { item.Date.Format("2006-01-02 15:04:05") }</p>
			<p class="media-meta media-text">{ item.Text }</p>
		</div>
		<div class="controls">
			<a
				href={ templ.URL("/media/" + item.FileName) }
				download={ item.FileName }
				class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
			>
				Download
			</a>
			<button
				hx-trigger="click"
				hx-swap="outerHTML"
				hx-post={ "/delete/" + strconv.FormatUint(uint64(item.ID), 10) }
				hx-target={ "#media-item-" + strconv.FormatUint(uint64(item.ID), 10) }
				class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
			>
				Delete
			</button>
			<button
				hx-trigger="click"
				hx-swap="outerHTML"
				hx-post={ "/favorite/" + strconv.FormatUint(uint64(item.ID), 10) }
				hx-target={ "#media-item-" + strconv.FormatUint(uint64(item.ID), 10) }
				class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
			>
				Favorite
			</button>
		</div>
	</div>
}

templ Pagination(currentPage, totalPages int) {
	<div class="pagination flex justify-center space-x-2 mt-4">
		if currentPage > 1 {
			<a href={ templ.SafeURL("/?page=" + strconv.Itoa(currentPage-1)) } class="px-4 py-2 bg-blue-500 text-white rounded">
				Previous
			</a>
		}
		<span class="px-4 py-2">Page { strconv.Itoa(currentPage) } of { strconv.Itoa(totalPages) }</span>
		if currentPage < totalPages {
			<a href={ templ.SafeURL("/?page=" + strconv.Itoa(currentPage+1)) } class="px-4 py-2 bg-blue-500 text-white rounded">
				Next
			</a>
		}
	</div>
}
